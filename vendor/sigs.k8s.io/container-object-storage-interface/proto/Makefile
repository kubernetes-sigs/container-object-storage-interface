all: check

.SUFFIXES: # remove legacy builtin suffixes to allow easier make debugging

########################################################################
##                             GOLANG                                 ##
########################################################################

# If GOPATH isn't defined then set its default location.
ifeq (,$(strip $(GOPATH)))
GOPATH := $(HOME)/go
else
# If GOPATH is already set then update GOPATH to be its own
# first element.
GOPATH := $(word 1,$(subst :, ,$(GOPATH)))
endif
export GOPATH


########################################################################
##                             PROTOC                                 ##
########################################################################

# Only set PROTOC_VER if it has an empty value.
ifeq (,$(strip $(PROTOC_VER)))
PROTOC_VER := 27.2
endif

PROTOC_OS := $(shell uname -s)
ifeq (Darwin,$(PROTOC_OS))
PROTOC_OS := osx
endif

PROTOC_ARCH := $(shell uname -m)
ifeq (i386,$(PROTOC_ARCH))
PROTOC_ARCH := x86_32
else ifeq (arm64,$(PROTOC_ARCH))
PROTOC_ARCH := aarch_64
endif

PROTOC_ZIP := protoc-$(PROTOC_VER)-$(PROTOC_OS)-$(PROTOC_ARCH).zip
PROTOC_URL := https://github.com/protocolbuffers/protobuf/releases/download/v$(PROTOC_VER)/$(PROTOC_ZIP)
PROTOC_TMP_DIR := .protoc
PROTOC_BIN_DIR := $(PROTOC_TMP_DIR)/bin
PROTOC := $(PROTOC_BIN_DIR)/protoc
PROTOC_TMP_INC := $(PROTOC_TMP_DIR)/include

$(PROTOC):
	-mkdir -p "$(PROTOC_TMP_DIR)" && \
	  curl -L $(PROTOC_URL) -o "$(PROTOC_TMP_DIR)/$(PROTOC_ZIP)" && \
	  unzip -o "$(PROTOC_TMP_DIR)/$(PROTOC_ZIP)" -d "$(PROTOC_TMP_DIR)" && \
	  unzip -o "$(PROTOC_TMP_DIR)/$(PROTOC_ZIP)" -d "$(PROTOC_TMP_INC)/*" && \
	  chmod 0755 "$@"
	stat "$@" > /dev/null 2>&1

$(PROTOC_BIN_DIR)/protoc-gen-go: go.mod
	GOBIN="$(CURDIR)"/$(PROTOC_BIN_DIR) go install google.golang.org/protobuf/cmd/protoc-gen-go

$(PROTOC_BIN_DIR)/protoc-gen-go-grpc:
	GOBIN="$(CURDIR)"/$(PROTOC_BIN_DIR) go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@v1.3.0

$(PROTOC_BIN_DIR)/protoc-gen-go-json:
	GOBIN="$(CURDIR)"/$(PROTOC_BIN_DIR) go install github.com/mitchellh/protoc-gen-go-json@v1.1.0

PROTOC_ALL := $(PROTOC_BIN_DIR)/protoc-gen-go $(PROTOC_BIN_DIR)/protoc-gen-go-grpc $(PROTOC_BIN_DIR)/protoc-gen-go-json $(PROTOC)

# Update PATH to discover the protoc binaries
export PATH := $(PROTOC_BIN_DIR):$(PATH)

########################################################################
##                          PROTOC-GEN-GO-FAKE                        ##
########################################################################

# This is the recipe for getting and installing the grpc go
PROTOC_GEN_GO_FAKE_SRC := ./hack/fake-gen
PROTOC_GEN_GO_FAKE := $(PROTOC_BIN_DIR)/protoc-gen-gofake
$(PROTOC_GEN_GO_FAKE): $(PROTOC_GEN_GO_FAKE_SRC)
	go build -o $(PROTOC_GEN_GO_FAKE) $(PROTOC_GEN_GO_FAKE_SRC)

########################################################################
##                              BUILD                                 ##
########################################################################
COSI_SPEC := spec.md

COSI_PROTO := ./cosi.proto
COSI_GO := ./cosi.pb.go
COSI_GO_GRPC := ./cosi_grpc.pb.go
COSI_GO_JSON := ./cosi.pb.json.go
COSI_GO_FAKE := ./fake/cosi.pb.fake.go

BUILD_TMP_DIR := ./.build
BUILD_TMP_COSI_A := $(BUILD_TMP_DIR)/cosi.a
BUILD_PROTO_PATH := sigs.k8s.io/container-object-storage-interface/proto
BUILD_COSI_GO_TMP := $(BUILD_TMP_DIR)/$(BUILD_PROTO_PATH)/cosi.pb.go
BUILD_COSI_GO_GRPC_TMP := $(BUILD_TMP_DIR)/$(BUILD_PROTO_PATH)/cosi_grpc.pb.go
BUILD_COSI_GO_JSON_TMP := $(BUILD_TMP_DIR)/$(BUILD_PROTO_PATH)/cosi.pb.json.go
BUILD_COSI_GO_FAKE_TMP := $(BUILD_TMP_DIR)/fake/cosi.pb.fake.go

GO_JSON_OPTS := emit_defaults=true

GO_FAKE_OPTS := emit_defaults
GO_FAKE_OPTS := $(GO_FAKE_OPTS),packagePath=sigs.k8s.io/container-object-storage-interface/proto

$(COSI_PROTO): $(COSI_SPEC)
	echo "// Code generated by make; DO NOT EDIT." > "$(COSI_PROTO)"
	cat $(COSI_SPEC) | sed -n -e '/```protobuf$$/,/^```$$/ p' | sed '/^```/d' >> "$(COSI_PROTO)"

$(COSI_GO) $(COSI_GO_GRPC) $(COSI_GO_JSON) $(COSI_GO_FAKE) &: $(COSI_PROTO) $(PROTOC_ALL) $(PROTOC_GEN_GO_FAKE)
	mkdir -p "$(BUILD_TMP_DIR)"
	mkdir -p "$(BUILD_TMP_DIR)/fake"
	$(PROTOC) -I. -I$(PROTOC_TMP_INC) \
		--go_out=$(BUILD_TMP_DIR) \
		--go-grpc_out=$(BUILD_TMP_DIR) \
		--go-json_out=$(GO_JSON_OPTS):$(BUILD_TMP_DIR) \
		--gofake_out=$(GO_FAKE_OPTS):$(BUILD_TMP_DIR)/fake \
		"$(<F)"
	mv -f $(BUILD_COSI_GO_TMP) $(COSI_GO)
	mv -f $(BUILD_COSI_GO_GRPC_TMP) $(COSI_GO_GRPC)
	mv -f $(BUILD_COSI_GO_JSON_TMP) $(COSI_GO_JSON)
	mv -f $(BUILD_COSI_GO_FAKE_TMP) $(COSI_GO_FAKE)

$(BUILD_TMP_COSI_A): $(COSI_GO) $(COSI_GO_GRPC) $(COSI_GO_JSON) $(COSI_GO_FAKE)
	go build -o "$@" ./.


.PHONY: help
help: ## Display this help.
	@awk 'BEGIN {FS = ":.*##"; printf "\nUsage:\n  make \033[36m<target>\033[0m\n"} /^[a-zA-Z_0-9-]+:.*?##/ { printf "  \033[36m%-15s\033[0m %s\n", $$1, $$2 } /^##@/ { printf "\n\033[1m%s\033[0m\n", substr($$0, 5) } ' $(MAKEFILE_LIST)

##@ Development

.PHONY: generate
generate: $(COSI_PROTO) ## Generate cosi.proto

.PHONY: codegen
codegen: $(COSI_GO) $(COSI_GO_GRPC) $(COSI_GO_JSON) $(COSI_GO_FAKE) ## Generate protobuf files

.PHONY: check
check: $(BUILD_TMP_COSI_A) ## Generate protobuf files, and ensure they build

.PHONY: clean
clean: ## Clean all builds and generated files
	go clean -i ./...
	rm -rf "$(BUILD_TMP_DIR)" "$(COSI_PROTO)" "$(COSI_GO)" "$(COSI_GO_GRPC)" "$(COSI_GO_JSON)" "$(COSI_GO_FAKE)"

.PHONY: clobber
clobber: clean ## Clean, and remove all cached tooling
	rm -fr "$(PROTOC_TMP_DIR)"
